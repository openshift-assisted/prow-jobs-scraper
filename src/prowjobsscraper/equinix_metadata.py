import logging
from typing import Final

from google.cloud import exceptions, storage  # type: ignore

from prowjobsscraper import utils
from prowjobsscraper.prowjob import EquinixMetadata, ProwJob, ProwJobs

logger = logging.getLogger(__name__)


class EquinixMetadataExtractor:
    """
    EquinixMetadataExtractor parses the Equinix metadata generated by the gather step in assisted-baremetal, assisted-baremetal-operator and baremetalds-sno workflows.
    """

    _METADATA_PATH_TEMPLATE: Final[str] = (
        "{}/artifacts/{}/baremetalds-packet-gather-metadata/artifacts/equinix-metadata.json"
    )

    def __init__(self, client: storage.Client, gcs_bucket_name: str):
        self._client = client
        self._gcs_bucket_name = gcs_bucket_name

    def hydrate(self, jobs: ProwJobs) -> None:
        for job in jobs.items:
            self._set_equinix_metadata(job)

    def _set_equinix_metadata(self, job: ProwJob) -> None:
        if not (
            job.metadata.labels.cloudClusterProfile
            and "packet" in job.metadata.labels.cloudClusterProfile
        ):
            return

        base_path = utils.get_gcs_base_path_from_job_url(job.status.url)

        raw_metadata = None
        metadata_path = self._METADATA_PATH_TEMPLATE.format(base_path, job.context)
        try:
            raw_metadata = utils.download_from_gcs_as_string(
                self._client, self._gcs_bucket_name, metadata_path
            )
            logger.debug("Found equinix metadata: %s", metadata_path)

        except exceptions.ClientError as e:
            logger.debug("Equinix metadata are missing from %s: %s", metadata_path, e)

        if raw_metadata:
            job.equinixMetadata = EquinixMetadata.parse_raw(raw_metadata)
        else:
            logger.info("No equinix metadata found for job %s", job)
